package com.applicationsec

import org.springframework.context.annotation.Bean
import org.springframework.context.annotation.Configuration
import org.springframework.security.config.Customizer.withDefaults
import org.springframework.security.config.annotation.web.builders.HttpSecurity
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity
import org.springframework.security.core.userdetails.User
import org.springframework.security.core.userdetails.UserDetails
import org.springframework.security.provisioning.InMemoryUserDetailsManager
import org.springframework.security.web.SecurityFilterChain
import org.springframework.web.bind.annotation.*


@RestController
@RequestMapping
class Controller {

    @GetMapping("/")
    @ResponseBody
    fun index(): String? {
        return "welcome"
    }

    @GetMapping("/admin/{name}")
    @ResponseBody
    fun admin(@PathVariable name: String): String? {
        return "restricted"
    }
}


@Configuration
@EnableWebSecurity
open class AuthConfig {

    @Bean
    open fun securityFilterChain(http: HttpSecurity): SecurityFilterChain {
        http
                .authorizeHttpRequests { authorize ->
                    authorize
                            .regexMatchers("/admin/.*").authenticated()
                }
                .httpBasic(withDefaults())
                .formLogin(withDefaults())
        return http.build()
    }

    @Bean
    open fun userDetailsService(): InMemoryUserDetailsManager {
        val user: UserDetails = User.withDefaultPasswordEncoder()
                .username("user")
                .password("password")
                .roles("USER")
                .build()
        return InMemoryUserDetailsManager(user)
    }
}